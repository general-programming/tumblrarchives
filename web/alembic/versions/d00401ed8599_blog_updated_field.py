"""blog updated field

Revision ID: d00401ed8599
Revises: 819f5ed728b0
Create Date: 2018-12-08 02:51:06.131448

"""

# revision identifiers, used by Alembic.
revision = 'd00401ed8599'
down_revision = '819f5ed728b0'
branch_labels = None
depends_on = None

import datetime

from alembic import op
import sqlalchemy as sa

from archives.lib.model import Blog, sm


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('blogs', sa.Column('updated', sa.DateTime(), nullable=True))
    # ### end Alembic commands ###

    # Force commit the operation
    conn = op.get_bind()
    conn.execute("COMMIT")

    updates = []
    added = 0
    db = sm()
    commit_db = sm()

    for blog in db.query(Blog).filter(sa.or_(
        Blog.data.has_key("updated")
    )).yield_per(512):
        try:
            new_data = blog.data.copy()
            updated_epoch = new_data.pop("updated", 0)
            updated_date = max(
                datetime.datetime.fromtimestamp(updated_epoch),
                getattr(blog, "updated", None) or datetime.datetime.fromtimestamp(updated_epoch)
            )

            updates.append({
                "id": blog.id,
                "updated": updated_date,
                "data": new_data
            })
        except KeyError:
            continue
        
        # Commit every 512 blogs.
        added += 1
        if len(updates) == 512:
            commit_db.execute("SET synchronous_commit TO off")
            print(f"{added} blogs processed.", flush=True)
            commit_db.bulk_update_mappings(Blog, updates)
            commit_db.commit()
            updates.clear()

    if updates:
        commit_db.bulk_update_mappings(Blog, updates)
        commit_db.commit()

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('blogs', 'updated')
    # ### end Alembic commands ###
